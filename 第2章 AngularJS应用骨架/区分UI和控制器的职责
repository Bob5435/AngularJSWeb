在应用中控制器有三种职责：

为应用中的模型设置初始状态。

通过$scope 对象把数据模型和函数暴露给视图（UI模板）。

监视模型其余部分的变化，并采取相应的动作。

对于前两项职责，本章已经列举过很多例子，这里我们来简要地看看第三项。从概念上讲，控制器存在的目的是：当用户与视图进行交互时，它负责提供代码或者逻辑以便执行用户的想法。

为了让控制器保持小巧和可管理状态，我们的建议是，为视图中的每一块功能区域创建一个控制器。也就是说，如果你有一个菜单，就创建一个MenuController；如果你有一个用来导航的面包屑，那就写一个BreadcrumbController ；等等。

你可能已经开始明白了，但是需要明确的是，控制器是绑定在特定的DOM片段上的，这些片段就是它们需要负责管理的内容。有两种主要的方法可以把控制器关联到DOM节点上，第一种是在模板中通过ng-controller 属性来声明，另一种是通过路由把它绑定到一个动态加载的DOM模板片段上，这个模板叫做视图。

我们将会在本章稍后的内容中来讨论视图和路由。

如果你的UI中带有一些非常复杂的区域，你可以创建嵌套的控制器，它们可以通过继承树结构来共享数据模型和函数，这样你就可以保持代码的简单和可维护性。嵌套控制器非常简单，你只要把控制器设置到DOM元素内部嵌套的元素上即可，示例如下：
<div ng-controller="ParentController">
  <div ng-controller="ChildController">...</div>
</div>

虽然我们把这种方式叫做控制器嵌套，但真实的嵌套发生在$scope对象上。通过内部的原型继承机制，父控制器对象上的$scope 会被传递给内部嵌套控制器的$scope 。具体到上面例子就是，ChildController的$scope 对象可以访问ParentController 的$scope 对象上的所有属性（和函数）。
